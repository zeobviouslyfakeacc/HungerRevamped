using HarmonyLib;
using Il2Cpp;

namespace HungerRevamped {

	/*
	 * The cooking skill can be exploited by creating many small pieces of meat and cooking them individually.
	 * Each of these cooking actions yields one skill point, just as if the player cooked a full 1kg piece of meat.
	 * Using this exploit, a player can advance the cooking skill from level 1 to level 5 with just one or two
	 * deer carcasses.
	 *
	 * I've also disabled gaining skill points for cooking ruined items.
	 */

	internal static class Watch_PickUpCookedGearItem {
		internal static bool isExecuting = false;
		internal static CookingPotItem cookingPot = null;
	}

	[HarmonyPatch(typeof(CookingPotItem), "PickUpCookedGearItem")]
	internal static class ExploitableCookingSkillFix {
		private static void Prefix(CookingPotItem __instance) {
			if (!MenuSettings.settings.fixCookingSkillExploit) return;
			Watch_PickUpCookedGearItem.isExecuting = true;
			Watch_PickUpCookedGearItem.cookingPot = __instance;
		}

		private static void Postfix() {
			if (!MenuSettings.settings.fixCookingSkillExploit) return;
			Watch_PickUpCookedGearItem.isExecuting = false;
			Watch_PickUpCookedGearItem.cookingPot = null;
		}
	}

	[HarmonyPatch(typeof(SkillsManager), "IncrementPointsAndNotify")]
	internal class Incrementskill {
		private static bool Prefix() {
			if (!MenuSettings.settings.fixCookingSkillExploit) return true;
			if (!Watch_PickUpCookedGearItem.isExecuting) return true;

			return ShouldAwardSkillPointForFoodItem(Watch_PickUpCookedGearItem.cookingPot);
		}

		private static bool ShouldAwardSkillPointForFoodItem(CookingPotItem pot) {
			GearItem itemBeingCooked = pot?.m_GearItemBeingCooked;
			if (itemBeingCooked && itemBeingCooked.IsWornOut()) {
				return false; // No skill points for cooking ruined items
			} else if (itemBeingCooked && itemBeingCooked.m_FoodItem) {
				FoodItem food = itemBeingCooked.m_FoodItem;
				if (food.m_IsMeat) {
					return Utils.RollChance(100f * food.m_CaloriesRemaining / food.m_CaloriesTotal);
				}
			}
			return true;
		}
	}
}
